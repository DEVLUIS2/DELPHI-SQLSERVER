unit RELCLIENTE;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, RLReport, jpeg, DB, ADODB, DateUtils;

type
  TTRCliente = class(TForm)
    qCliente: TADOQuery;
    dsCliente: TDataSource;
    RLReport1: TRLReport;
    s: TRLBand;
    RLPanel1: TRLPanel;
    RLPanel2: TRLPanel;
    RLPanel3: TRLPanel;
    RLLabel2: TRLLabel;
    RLLabel3: TRLLabel;
    RLLabel4: TRLLabel;
    RLBand2: TRLBand;
    RLPanel5: TRLPanel;
    RLPanel6: TRLPanel;
    RLPanel7: TRLPanel;
    RLLabel5: TRLLabel;
    RLLabel6: TRLLabel;
    RLLabel7: TRLLabel;
    RLBand3: TRLBand;
    RLPanel8: TRLPanel;
    RLPanel9: TRLPanel;
    RLPanel10: TRLPanel;
    RLDBText1: TRLDBText;
    RLDBText2: TRLDBText;
    RLDBText3: TRLDBText;
    RLBand4: TRLBand;
    RLPanel11: TRLPanel;
    RLLabel8: TRLLabel;
    RLBand5: TRLBand;
    RLPanel23: TRLPanel;
    RLLabel13: TRLLabel;
    RLPanel24: TRLPanel;
    RLDBResult1: TRLDBResult;
    RLBand1: TRLBand;
    RLPanel4: TRLPanel;
    RLLabel1: TRLLabel;
    RLPanel12: TRLPanel;
    RLLabel9: TRLLabel;
    RLBand6: TRLBand;
    RLPanel13: TRLPanel;
    RLDBText4: TRLDBText;
    RLPanel14: TRLPanel;
    RLDBText5: TRLDBText;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
     Ordenastatus,OrdenaCampo,RecebeRelatorio,RecebeCliente:Integer;
     procedure DadosRelatorio;
     procedure RelatorioSintetico;
     procedure BloquearRelatorio;
  public
    { Public declarations }
    procedure ChamaTela(Status,Ordenar,Relatorio,Cliente: Integer);

  end;

var
  TRCliente: TTRCliente;

implementation

uses
  DMPRINCIPAL, Funcoes;

{$R *.dfm}

{ TRCLIENTE }


{ TTRCliente }

procedure TTRCliente.BloquearRelatorio;
begin
  case RecebeRelatorio of
    0:
    begin
      RLBand1.Visible := False;
      RLBand6.Visible := False;
    end;
    1:
    begin
      RLBand2.Visible := False;
      RLBand3.Visible := False;
    end;
    2://Relatório Gráfico
    begin

    end;
  end;
end;

procedure TTRCliente.ChamaTela(Status,Ordenar,Relatorio,Cliente:Integer);
begin
  TRCliente := TTRCliente.Create(Application);
  with TRCliente do
  begin
    Ordenastatus := Status;
    OrdenaCampo := Ordenar;
    RecebeRelatorio := Relatorio;
    RecebeCliente := Cliente;
    BloquearRelatorio;
    case Relatorio of
      0:
      begin
        DadosRelatorio;
      end;
      1:
      begin
        RelatorioSintetico;
      end;
      2://Relatório Gráfico
      begin

      end;
    end;

    if qCliente.IsEmpty then
    begin
      enviaMensagem('Não existe informação referente a pesquisa efetuada','Informação...',mtConfirmation,[mbOK]);
      Exit;
    end
    else
      RLReport1.PreviewModal;
    FreeAndNil(TRCliente);
  end;
end;

procedure TTRCliente.DadosRelatorio;
  function FiltroSQL:string;
  begin
    if RLReport1.Tag = 0 then
    begin
      RLReport1.Tag := 1;
      Result := ' WHERE ';
    end
    else
      Result := ' AND ';
  end;

begin
  with qCliente do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT COD_CLI,NOME_CLI,RG_CLI');
    SQL.Add('FROM CLIENTE');
    if RecebeCliente > 0 then
      SQL.Add(FiltroSQL + 'COD_CLI = '+ IntToStr(RecebeCliente));
    case Ordenastatus of
      0:
      begin
        RLLabel3.Caption := 'Relatório de Todos os Cliente';
      end;
      1:
      begin
        SQL.Add(FiltroSQL +' ATIVO = 1');
        RLLabel3.Caption := 'Relatório de Clientes Ativos';
      end;
      2:
      begin
        SQL.Add(FiltroSQL +' ATIVO = 0');
        RLLabel3.Caption := 'Relatórios de Clientes Inativos';
      end;
    end;
    case OrdenaCampo of
      0:
      begin
        SQL.Add('ORDER BY COD_CLI ASC');
        RLLabel4.Caption := 'Ordenado pelo Código';
      end;
      1:
      begin
        SQL.Add('ORDER BY NOME_CLI ASC');
        RLLabel4.Caption := 'Ordenado pelo Nome';
      end;
    end;
    RLLabel8.Caption := '  Focus Desenvolvimento de Sistemas - Gerado em ' + FormatDateTime('dd.mm.yyyy hh:MM:ss',Now) + ' .';
    Open;
  end;
end;

procedure TTRCliente.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case key of
    VK_ESCAPE:
      Close;
  end;
end;

procedure TTRCliente.RelatorioSintetico;
begin
  with qCliente do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT '+QuotedStr('ATIVO')+'AS STATUS, COUNT(COD_CLI)AS COD_CLI');
    SQL.Add('FROM CLIENTE');
    SQL.Add('WHERE ATIVO = 1');
    SQL.Add('UNION ALL');
    SQL.Add('SELECT '+QuotedStr('INATIVO')+'AS STATUS, COUNT(COD_CLI)AS COD_CLI');
    SQL.Add('FROM CLIENTE');
    SQL.Add('WHERE ATIVO = 0');
    Open;
  end;
end;

end.
